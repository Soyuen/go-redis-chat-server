// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/realtimeiface/subscriber.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChannelEventSubscriber is a mock of ChannelEventSubscriber interface.
type MockChannelEventSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockChannelEventSubscriberMockRecorder
}

// MockChannelEventSubscriberMockRecorder is the mock recorder for MockChannelEventSubscriber.
type MockChannelEventSubscriberMockRecorder struct {
	mock *MockChannelEventSubscriber
}

// NewMockChannelEventSubscriber creates a new mock instance.
func NewMockChannelEventSubscriber(ctrl *gomock.Controller) *MockChannelEventSubscriber {
	mock := &MockChannelEventSubscriber{ctrl: ctrl}
	mock.recorder = &MockChannelEventSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelEventSubscriber) EXPECT() *MockChannelEventSubscriberMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockChannelEventSubscriber) Start(channel string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", channel)
}

// Start indicates an expected call of Start.
func (mr *MockChannelEventSubscriberMockRecorder) Start(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockChannelEventSubscriber)(nil).Start), channel)
}

// Stop mocks base method.
func (m *MockChannelEventSubscriber) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockChannelEventSubscriberMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockChannelEventSubscriber)(nil).Stop))
}
