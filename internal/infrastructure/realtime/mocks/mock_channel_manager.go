// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/realtimeiface/channel_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	realtimeiface "github.com/Soyuen/go-redis-chat-server/pkg/realtimeiface"
	gomock "github.com/golang/mock/gomock"
)

// MockChannelManager is a mock of ChannelManager interface.
type MockChannelManager struct {
	ctrl     *gomock.Controller
	recorder *MockChannelManagerMockRecorder
}

// MockChannelManagerMockRecorder is the mock recorder for MockChannelManager.
type MockChannelManagerMockRecorder struct {
	mock *MockChannelManager
}

// NewMockChannelManager creates a new mock instance.
func NewMockChannelManager(ctrl *gomock.Controller) *MockChannelManager {
	mock := &MockChannelManager{ctrl: ctrl}
	mock.recorder = &MockChannelManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelManager) EXPECT() *MockChannelManagerMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockChannelManager) Broadcast(msg realtimeiface.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast", msg)
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockChannelManagerMockRecorder) Broadcast(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockChannelManager)(nil).Broadcast), msg)
}

// CloseAllChannels mocks base method.
func (m *MockChannelManager) CloseAllChannels() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseAllChannels")
}

// CloseAllChannels indicates an expected call of CloseAllChannels.
func (mr *MockChannelManagerMockRecorder) CloseAllChannels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAllChannels", reflect.TypeOf((*MockChannelManager)(nil).CloseAllChannels))
}

// CloseChannel mocks base method.
func (m *MockChannelManager) CloseChannel(channel string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseChannel", channel)
}

// CloseChannel indicates an expected call of CloseChannel.
func (mr *MockChannelManagerMockRecorder) CloseChannel(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseChannel", reflect.TypeOf((*MockChannelManager)(nil).CloseChannel), channel)
}

// GetOrCreateChannel mocks base method.
func (m *MockChannelManager) GetOrCreateChannel(channel string) realtimeiface.Broadcaster {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateChannel", channel)
	ret0, _ := ret[0].(realtimeiface.Broadcaster)
	return ret0
}

// GetOrCreateChannel indicates an expected call of GetOrCreateChannel.
func (mr *MockChannelManagerMockRecorder) GetOrCreateChannel(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateChannel", reflect.TypeOf((*MockChannelManager)(nil).GetOrCreateChannel), channel)
}
