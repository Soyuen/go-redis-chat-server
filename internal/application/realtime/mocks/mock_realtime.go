// Code generated by MockGen. DO NOT EDIT.
// Source: go-redis-chat-server/internal/application/realtime/ports.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	realtime "github.com/Soyuen/go-redis-chat-server/internal/application/realtime"
	gomock "github.com/golang/mock/gomock"
)

// MockWSConn is a mock of WSConn interface.
type MockWSConn struct {
	ctrl     *gomock.Controller
	recorder *MockWSConnMockRecorder
}

// MockWSConnMockRecorder is the mock recorder for MockWSConn.
type MockWSConnMockRecorder struct {
	mock *MockWSConn
}

// NewMockWSConn creates a new mock instance.
func NewMockWSConn(ctrl *gomock.Controller) *MockWSConn {
	mock := &MockWSConn{ctrl: ctrl}
	mock.recorder = &MockWSConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWSConn) EXPECT() *MockWSConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWSConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWSConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWSConn)(nil).Close))
}

// ReadMessage mocks base method.
func (m *MockWSConn) ReadMessage() (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockWSConnMockRecorder) ReadMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockWSConn)(nil).ReadMessage))
}

// WriteMessage mocks base method.
func (m *MockWSConn) WriteMessage(messageType int, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", messageType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage.
func (mr *MockWSConnMockRecorder) WriteMessage(messageType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockWSConn)(nil).WriteMessage), messageType, data)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// ReadPump mocks base method.
func (m *MockClient) ReadPump(onMessage func([]byte)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPump", onMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadPump indicates an expected call of ReadPump.
func (mr *MockClientMockRecorder) ReadPump(onMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPump", reflect.TypeOf((*MockClient)(nil).ReadPump), onMessage)
}

// Send mocks base method.
func (m *MockClient) Send(message []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", message)
}

// Send indicates an expected call of Send.
func (mr *MockClientMockRecorder) Send(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockClient)(nil).Send), message)
}

// WritePump mocks base method.
func (m *MockClient) WritePump() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WritePump")
}

// WritePump indicates an expected call of WritePump.
func (mr *MockClientMockRecorder) WritePump() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePump", reflect.TypeOf((*MockClient)(nil).WritePump))
}

// MockClientFactory is a mock of ClientFactory interface.
type MockClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockClientFactoryMockRecorder
}

// MockClientFactoryMockRecorder is the mock recorder for MockClientFactory.
type MockClientFactoryMockRecorder struct {
	mock *MockClientFactory
}

// NewMockClientFactory creates a new mock instance.
func NewMockClientFactory(ctrl *gomock.Controller) *MockClientFactory {
	mock := &MockClientFactory{ctrl: ctrl}
	mock.recorder = &MockClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientFactory) EXPECT() *MockClientFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockClientFactory) New(conn realtime.WSConn) realtime.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", conn)
	ret0, _ := ret[0].(realtime.Client)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockClientFactoryMockRecorder) New(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockClientFactory)(nil).New), conn)
}

// MockBroadcaster is a mock of Broadcaster interface.
type MockBroadcaster struct {
	ctrl     *gomock.Controller
	recorder *MockBroadcasterMockRecorder
}

// MockBroadcasterMockRecorder is the mock recorder for MockBroadcaster.
type MockBroadcasterMockRecorder struct {
	mock *MockBroadcaster
}

// NewMockBroadcaster creates a new mock instance.
func NewMockBroadcaster(ctrl *gomock.Controller) *MockBroadcaster {
	mock := &MockBroadcaster{ctrl: ctrl}
	mock.recorder = &MockBroadcasterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroadcaster) EXPECT() *MockBroadcasterMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockBroadcaster) Broadcast(message []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast", message)
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockBroadcasterMockRecorder) Broadcast(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockBroadcaster)(nil).Broadcast), message)
}

// CloseAllClients mocks base method.
func (m *MockBroadcaster) CloseAllClients() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseAllClients")
}

// CloseAllClients indicates an expected call of CloseAllClients.
func (mr *MockBroadcasterMockRecorder) CloseAllClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAllClients", reflect.TypeOf((*MockBroadcaster)(nil).CloseAllClients))
}

// Register mocks base method.
func (m *MockBroadcaster) Register(client realtime.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", client)
}

// Register indicates an expected call of Register.
func (mr *MockBroadcasterMockRecorder) Register(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockBroadcaster)(nil).Register), client)
}

// Unregister mocks base method.
func (m *MockBroadcaster) Unregister(client realtime.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unregister", client)
}

// Unregister indicates an expected call of Unregister.
func (mr *MockBroadcasterMockRecorder) Unregister(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockBroadcaster)(nil).Unregister), client)
}

// MockChannelManager is a mock of ChannelManager interface.
type MockChannelManager struct {
	ctrl     *gomock.Controller
	recorder *MockChannelManagerMockRecorder
}

// MockChannelManagerMockRecorder is the mock recorder for MockChannelManager.
type MockChannelManagerMockRecorder struct {
	mock *MockChannelManager
}

// NewMockChannelManager creates a new mock instance.
func NewMockChannelManager(ctrl *gomock.Controller) *MockChannelManager {
	mock := &MockChannelManager{ctrl: ctrl}
	mock.recorder = &MockChannelManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelManager) EXPECT() *MockChannelManagerMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockChannelManager) Broadcast(msg realtime.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast", msg)
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockChannelManagerMockRecorder) Broadcast(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockChannelManager)(nil).Broadcast), msg)
}

// CloseAllChannels mocks base method.
func (m *MockChannelManager) CloseAllChannels() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseAllChannels")
}

// CloseAllChannels indicates an expected call of CloseAllChannels.
func (mr *MockChannelManagerMockRecorder) CloseAllChannels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAllChannels", reflect.TypeOf((*MockChannelManager)(nil).CloseAllChannels))
}

// CloseChannel mocks base method.
func (m *MockChannelManager) CloseChannel(channel string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseChannel", channel)
}

// CloseChannel indicates an expected call of CloseChannel.
func (mr *MockChannelManagerMockRecorder) CloseChannel(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseChannel", reflect.TypeOf((*MockChannelManager)(nil).CloseChannel), channel)
}

// GetOrCreateChannel mocks base method.
func (m *MockChannelManager) GetOrCreateChannel(channel string) realtime.Broadcaster {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateChannel", channel)
	ret0, _ := ret[0].(realtime.Broadcaster)
	return ret0
}

// GetOrCreateChannel indicates an expected call of GetOrCreateChannel.
func (mr *MockChannelManagerMockRecorder) GetOrCreateChannel(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateChannel", reflect.TypeOf((*MockChannelManager)(nil).GetOrCreateChannel), channel)
}

// MockChannelEventSubscriber is a mock of ChannelEventSubscriber interface.
type MockChannelEventSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockChannelEventSubscriberMockRecorder
}

// MockChannelEventSubscriberMockRecorder is the mock recorder for MockChannelEventSubscriber.
type MockChannelEventSubscriberMockRecorder struct {
	mock *MockChannelEventSubscriber
}

// NewMockChannelEventSubscriber creates a new mock instance.
func NewMockChannelEventSubscriber(ctrl *gomock.Controller) *MockChannelEventSubscriber {
	mock := &MockChannelEventSubscriber{ctrl: ctrl}
	mock.recorder = &MockChannelEventSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelEventSubscriber) EXPECT() *MockChannelEventSubscriberMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockChannelEventSubscriber) Start(channel string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", channel)
}

// Start indicates an expected call of Start.
func (mr *MockChannelEventSubscriberMockRecorder) Start(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockChannelEventSubscriber)(nil).Start), channel)
}

// Stop mocks base method.
func (m *MockChannelEventSubscriber) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockChannelEventSubscriberMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockChannelEventSubscriber)(nil).Stop))
}

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// HandleConnection mocks base method.
func (m *MockConnection) HandleConnection(conn realtime.WSConn, channel string, onMessage func([]byte) *realtime.Message, onClose func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleConnection", conn, channel, onMessage, onClose)
}

// HandleConnection indicates an expected call of HandleConnection.
func (mr *MockConnectionMockRecorder) HandleConnection(conn, channel, onMessage, onClose interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleConnection", reflect.TypeOf((*MockConnection)(nil).HandleConnection), conn, channel, onMessage, onClose)
}
