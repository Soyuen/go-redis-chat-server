// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Soyuen/go-redis-chat-server/internal/application/realtime (interfaces: Broadcaster)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	realtime "github.com/Soyuen/go-redis-chat-server/internal/application/realtime"
	gomock "github.com/golang/mock/gomock"
)

// MockBroadcaster is a mock of Broadcaster interface.
type MockBroadcaster struct {
	ctrl     *gomock.Controller
	recorder *MockBroadcasterMockRecorder
}

// MockBroadcasterMockRecorder is the mock recorder for MockBroadcaster.
type MockBroadcasterMockRecorder struct {
	mock *MockBroadcaster
}

// NewMockBroadcaster creates a new mock instance.
func NewMockBroadcaster(ctrl *gomock.Controller) *MockBroadcaster {
	mock := &MockBroadcaster{ctrl: ctrl}
	mock.recorder = &MockBroadcasterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroadcaster) EXPECT() *MockBroadcasterMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockBroadcaster) Broadcast(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast", arg0)
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockBroadcasterMockRecorder) Broadcast(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockBroadcaster)(nil).Broadcast), arg0)
}

// CloseAllClients mocks base method.
func (m *MockBroadcaster) CloseAllClients() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseAllClients")
}

// CloseAllClients indicates an expected call of CloseAllClients.
func (mr *MockBroadcasterMockRecorder) CloseAllClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAllClients", reflect.TypeOf((*MockBroadcaster)(nil).CloseAllClients))
}

// Register mocks base method.
func (m *MockBroadcaster) Register(arg0 realtime.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0)
}

// Register indicates an expected call of Register.
func (mr *MockBroadcasterMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockBroadcaster)(nil).Register), arg0)
}

// Unregister mocks base method.
func (m *MockBroadcaster) Unregister(arg0 realtime.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unregister", arg0)
}

// Unregister indicates an expected call of Unregister.
func (mr *MockBroadcasterMockRecorder) Unregister(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockBroadcaster)(nil).Unregister), arg0)
}
