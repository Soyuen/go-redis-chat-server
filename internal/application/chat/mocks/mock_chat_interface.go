// Code generated by MockGen. DO NOT EDIT.
// Source: go-redis-chat-server/internal/application/chat/chat_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	chat "github.com/Soyuen/go-redis-chat-server/internal/domain/chat"
	gomock "github.com/golang/mock/gomock"
)

// MockChatService is a mock of ChatService interface.
type MockChatService struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceMockRecorder
}

// MockChatServiceMockRecorder is the mock recorder for MockChatService.
type MockChatServiceMockRecorder struct {
	mock *MockChatService
}

// NewMockChatService creates a new mock instance.
func NewMockChatService(ctrl *gomock.Controller) *MockChatService {
	mock := &MockChatService{ctrl: ctrl}
	mock.recorder = &MockChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService) EXPECT() *MockChatServiceMockRecorder {
	return m.recorder
}

// AddUserToChannelZSet mocks base method.
func (m *MockChatService) AddUserToChannelZSet(ctx context.Context, channel, user string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToChannelZSet", ctx, channel, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToChannelZSet indicates an expected call of AddUserToChannelZSet.
func (mr *MockChatServiceMockRecorder) AddUserToChannelZSet(ctx, channel, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToChannelZSet", reflect.TypeOf((*MockChatService)(nil).AddUserToChannelZSet), ctx, channel, user)
}

// BroadcastSystemMessage mocks base method.
func (m *MockChatService) BroadcastSystemMessage(channel, nickname, action string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastSystemMessage", channel, nickname, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// BroadcastSystemMessage indicates an expected call of BroadcastSystemMessage.
func (mr *MockChatServiceMockRecorder) BroadcastSystemMessage(channel, nickname, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastSystemMessage", reflect.TypeOf((*MockChatService)(nil).BroadcastSystemMessage), channel, nickname, action)
}

// CreateRoom mocks base method.
func (m *MockChatService) CreateRoom(roomName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", roomName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockChatServiceMockRecorder) CreateRoom(roomName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockChatService)(nil).CreateRoom), roomName)
}

// ProcessIncoming mocks base method.
func (m *MockChatService) ProcessIncoming(raw []byte, sender, channel string) (*chat.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessIncoming", raw, sender, channel)
	ret0, _ := ret[0].(*chat.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessIncoming indicates an expected call of ProcessIncoming.
func (mr *MockChatServiceMockRecorder) ProcessIncoming(raw, sender, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessIncoming", reflect.TypeOf((*MockChatService)(nil).ProcessIncoming), raw, sender, channel)
}
