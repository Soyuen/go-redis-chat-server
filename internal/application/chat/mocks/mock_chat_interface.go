// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/chat/chat_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	chat "github.com/Soyuen/go-redis-chat-server/internal/application/chat"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageProcessor is a mock of MessageProcessor interface.
type MockMessageProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockMessageProcessorMockRecorder
}

// MockMessageProcessorMockRecorder is the mock recorder for MockMessageProcessor.
type MockMessageProcessorMockRecorder struct {
	mock *MockMessageProcessor
}

// NewMockMessageProcessor creates a new mock instance.
func NewMockMessageProcessor(ctrl *gomock.Controller) *MockMessageProcessor {
	mock := &MockMessageProcessor{ctrl: ctrl}
	mock.recorder = &MockMessageProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageProcessor) EXPECT() *MockMessageProcessorMockRecorder {
	return m.recorder
}

// ProcessIncoming mocks base method.
func (m *MockMessageProcessor) ProcessIncoming(raw []byte, username, channel string) (*chat.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessIncoming", raw, username, channel)
	ret0, _ := ret[0].(*chat.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessIncoming indicates an expected call of ProcessIncoming.
func (mr *MockMessageProcessorMockRecorder) ProcessIncoming(raw, username, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessIncoming", reflect.TypeOf((*MockMessageProcessor)(nil).ProcessIncoming), raw, username, channel)
}
