// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Soyuen/go-redis-chat-server/internal/application/chat (interfaces: ChatService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	chat "github.com/Soyuen/go-redis-chat-server/internal/domain/chat"
	gomock "github.com/golang/mock/gomock"
)

// MockChatService is a mock of ChatService interface.
type MockChatService struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceMockRecorder
}

// MockChatServiceMockRecorder is the mock recorder for MockChatService.
type MockChatServiceMockRecorder struct {
	mock *MockChatService
}

// NewMockChatService creates a new mock instance.
func NewMockChatService(ctrl *gomock.Controller) *MockChatService {
	mock := &MockChatService{ctrl: ctrl}
	mock.recorder = &MockChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService) EXPECT() *MockChatServiceMockRecorder {
	return m.recorder
}

// BroadcastSystemMessage mocks base method.
func (m *MockChatService) BroadcastSystemMessage(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastSystemMessage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// BroadcastSystemMessage indicates an expected call of BroadcastSystemMessage.
func (mr *MockChatServiceMockRecorder) BroadcastSystemMessage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastSystemMessage", reflect.TypeOf((*MockChatService)(nil).BroadcastSystemMessage), arg0, arg1, arg2, arg3)
}

// CreateRoom mocks base method.
func (m *MockChatService) CreateRoom(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockChatServiceMockRecorder) CreateRoom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockChatService)(nil).CreateRoom), arg0)
}

// JoinChannel mocks base method.
func (m *MockChatService) JoinChannel(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinChannel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinChannel indicates an expected call of JoinChannel.
func (mr *MockChatServiceMockRecorder) JoinChannel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinChannel", reflect.TypeOf((*MockChatService)(nil).JoinChannel), arg0, arg1, arg2)
}

// ProcessIncoming mocks base method.
func (m *MockChatService) ProcessIncoming(arg0 []byte, arg1, arg2 string) (*chat.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessIncoming", arg0, arg1, arg2)
	ret0, _ := ret[0].(*chat.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessIncoming indicates an expected call of ProcessIncoming.
func (mr *MockChatServiceMockRecorder) ProcessIncoming(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessIncoming", reflect.TypeOf((*MockChatService)(nil).ProcessIncoming), arg0, arg1, arg2)
}

// UserExists mocks base method.
func (m *MockChatService) UserExists(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists.
func (mr *MockChatServiceMockRecorder) UserExists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockChatService)(nil).UserExists), arg0, arg1, arg2)
}
