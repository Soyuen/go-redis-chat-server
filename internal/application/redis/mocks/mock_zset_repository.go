// Code generated by MockGen. DO NOT EDIT.
// Source: go-redis-chat-server/internal/application/redis/ports.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockZSetRepository is a mock of ZSetRepository interface.
type MockZSetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockZSetRepositoryMockRecorder
}

// MockZSetRepositoryMockRecorder is the mock recorder for MockZSetRepository.
type MockZSetRepositoryMockRecorder struct {
	mock *MockZSetRepository
}

// NewMockZSetRepository creates a new mock instance.
func NewMockZSetRepository(ctrl *gomock.Controller) *MockZSetRepository {
	mock := &MockZSetRepository{ctrl: ctrl}
	mock.recorder = &MockZSetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZSetRepository) EXPECT() *MockZSetRepositoryMockRecorder {
	return m.recorder
}

// ZAdd mocks base method.
func (m *MockZSetRepository) ZAdd(ctx context.Context, key string, score float64, member string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAdd", ctx, key, score, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZAdd indicates an expected call of ZAdd.
func (mr *MockZSetRepositoryMockRecorder) ZAdd(ctx, key, score, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAdd", reflect.TypeOf((*MockZSetRepository)(nil).ZAdd), ctx, key, score, member)
}

// ZRange mocks base method.
func (m *MockZSetRepository) ZRange(ctx context.Context, key string, start, stop int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRange", ctx, key, start, stop)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRange indicates an expected call of ZRange.
func (mr *MockZSetRepositoryMockRecorder) ZRange(ctx, key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRange", reflect.TypeOf((*MockZSetRepository)(nil).ZRange), ctx, key, start, stop)
}

// ZRem mocks base method.
func (m *MockZSetRepository) ZRem(ctx context.Context, key, member string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRem", ctx, key, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZRem indicates an expected call of ZRem.
func (mr *MockZSetRepositoryMockRecorder) ZRem(ctx, key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRem", reflect.TypeOf((*MockZSetRepository)(nil).ZRem), ctx, key, member)
}

// ZScore mocks base method.
func (m *MockZSetRepository) ZScore(ctx context.Context, key, member string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZScore", ctx, key, member)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZScore indicates an expected call of ZScore.
func (mr *MockZSetRepositoryMockRecorder) ZScore(ctx, key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZScore", reflect.TypeOf((*MockZSetRepository)(nil).ZScore), ctx, key, member)
}
