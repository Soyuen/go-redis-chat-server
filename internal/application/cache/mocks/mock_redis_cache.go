// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Soyuen/go-redis-chat-server/internal/application/cache (interfaces: RedisCache)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRedisCache is a mock of RedisCache interface.
type MockRedisCache struct {
	ctrl     *gomock.Controller
	recorder *MockRedisCacheMockRecorder
}

// MockRedisCacheMockRecorder is the mock recorder for MockRedisCache.
type MockRedisCacheMockRecorder struct {
	mock *MockRedisCache
}

// NewMockRedisCache creates a new mock instance.
func NewMockRedisCache(ctrl *gomock.Controller) *MockRedisCache {
	mock := &MockRedisCache{ctrl: ctrl}
	mock.recorder = &MockRedisCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisCache) EXPECT() *MockRedisCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRedisCache) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRedisCacheMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRedisCache)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockRedisCache) Get(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRedisCacheMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisCache)(nil).Get), arg0, arg1)
}

// Set mocks base method.
func (m *MockRedisCache) Set(arg0 context.Context, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisCacheMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisCache)(nil).Set), arg0, arg1, arg2)
}

// ZAdd mocks base method.
func (m *MockRedisCache) ZAdd(arg0 context.Context, arg1, arg2 string, arg3 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAdd", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZAdd indicates an expected call of ZAdd.
func (mr *MockRedisCacheMockRecorder) ZAdd(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAdd", reflect.TypeOf((*MockRedisCache)(nil).ZAdd), arg0, arg1, arg2, arg3)
}

// ZCard mocks base method.
func (m *MockRedisCache) ZCard(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZCard", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZCard indicates an expected call of ZCard.
func (mr *MockRedisCacheMockRecorder) ZCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZCard", reflect.TypeOf((*MockRedisCache)(nil).ZCard), arg0, arg1)
}

// ZRange mocks base method.
func (m *MockRedisCache) ZRange(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRange", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRange indicates an expected call of ZRange.
func (mr *MockRedisCacheMockRecorder) ZRange(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRange", reflect.TypeOf((*MockRedisCache)(nil).ZRange), arg0, arg1, arg2, arg3)
}

// ZRem mocks base method.
func (m *MockRedisCache) ZRem(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRem", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZRem indicates an expected call of ZRem.
func (mr *MockRedisCacheMockRecorder) ZRem(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRem", reflect.TypeOf((*MockRedisCache)(nil).ZRem), arg0, arg1, arg2)
}
